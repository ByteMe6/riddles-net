import { useState, useEffect, useContext } from 'react';
import { auth, db } from './firebaseConfig';
import { ref, set, get } from 'firebase/database';
import './RiddleChat.scss';
import "/public/gemini-logo.png";
import { LangContext } from './App';

const API_KEY = import.meta.env.VITE_API_KEY;
const API_URL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent?key=${API_KEY}`;

const translations = {
  eng: {
    title: 'Riddles from AI',
    description: 'Here will be some riddles generated by AI (Gemini).',
    getRiddle: 'Get a riddle',
    generating: 'Generating...',
    check: 'Check',
    correct: 'Correct! üéâ. You can click "get a riddle" and get another one',
    incorrect: 'Incorrect. Try another one (click get a riddle)!',
    answer: 'Answer:',
    riddle: 'Riddle:',
    yourAnswer: 'Your answer...'
  },
  ru: {
    title: '–ó–∞–≥–∞–¥–∫–∏ –æ—Ç –ò–ò',
    description: '–ó–¥–µ—Å—å –±—É–¥—É—Ç –∑–∞–≥–∞–¥–∫–∏, —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ò–ò (Gemini).',
    getRiddle: '–ü–æ–ª—É—á–∏—Ç—å –∑–∞–≥–∞–¥–∫—É',
    generating: '–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è...',
    check: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å',
    correct: '–í–µ—Ä–Ω–æ! üéâ. –ú–æ–∂–µ—Ç–µ –Ω–∞–∂–∞—Ç—å "–ø–æ–ª—É—á–∏—Ç—å –∑–∞–≥–∞–¥–∫—É" –∏ –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—É—é',
    incorrect: '–ù–µ–≤–µ—Ä–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é (–Ω–∞–∂–º–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∑–∞–≥–∞–¥–∫—É)!',
    answer: '–û—Ç–≤–µ—Ç:',
    riddle: '–ó–∞–≥–∞–¥–∫–∞:',
    yourAnswer: '–í–∞—à –æ—Ç–≤–µ—Ç...'
  },
  ua: {
    title: '–ó–∞–≥–∞–¥–∫–∏ –≤—ñ–¥ –®–Ü',
    description: '–¢—É—Ç –±—É–¥—É—Ç—å –∑–∞–≥–∞–¥–∫–∏, –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω—ñ –®–Ü (Gemini).',
    getRiddle: '–û—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞–≥–∞–¥–∫—É',
    generating: '–ì–µ–Ω–µ—Ä—É—î—Ç—å—Å—è...',
    check: '–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏',
    correct: '–í—ñ—Ä–Ω–æ! üéâ. –ú–æ–∂–Ω–∞ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏ "–æ—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞–≥–∞–¥–∫—É" —ñ –æ—Ç—Ä–∏–º–∞—Ç–∏ –Ω–æ–≤—É',
    incorrect: '–ù–µ–≤—ñ—Ä–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à—É (–Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞–≥–∞–¥–∫—É)!',
    answer: '–í—ñ–¥–ø–æ–≤—ñ–¥—å:',
    riddle: '–ó–∞–≥–∞–¥–∫–∞:',
    yourAnswer: '–í–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å...'
  }
};

function RiddleChat() {
  const [riddle, setRiddle] = useState('');
  const [answer, setAnswer] = useState('');
  const [userAnswer, setUserAnswer] = useState('');
  const [result, setResult] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const { lang: contextLang } = useContext(LangContext);
  const [lang, setLang] = useState(contextLang || 'eng');

  useEffect(() => {
    const user = auth.currentUser;
    if (user) {
      const userRef = ref(db, `users/${user.uid}`);
      get(userRef).then((snapshot) => {
        const data = snapshot.val();
        if (data && data.lang) {
          setLang(data.lang);
        }
        if (!data) {
          // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ —Å 0 –æ—á–∫–∞–º–∏
          set(userRef, {
            username: user.displayName || user.email,
            score: 0,
            lang: 'eng',
          });
          // –î–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ leaderboard —Å 0 –æ—á–∫–∞–º–∏
          set(ref(db, `leaderboard/${user.uid}`), {
            username: user.displayName || user.email,
            score: 0,
          });
        }
      });
    }
  }, []); // –≠—Ç–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞

  useEffect(() => { setLang(contextLang); }, [contextLang]);

  async function getRiddle() {
    setLoading(true);
    setError('');
    setResult('');
    setRiddle('');
    setAnswer('');
    setUserAnswer('');
    try {
      let prompt = '';
      if (lang === 'eng') {
        prompt = 'Come up with an interesting riddle in English and give only the riddle, and write the answer separately. RIDDLE MUST BE IN ENGLISH. Format: Riddle: ... Answer: ...';
      } else if (lang === 'ru') {
        prompt = '–ü—Ä–∏–¥—É–º–∞–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é –∑–∞–≥–∞–¥–∫—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –∏ –¥–∞–π —Ç–æ–ª—å–∫–æ –∑–∞–≥–∞–¥–∫—É, –∞ –æ—Ç–≤–µ—Ç –Ω–∞–ø–∏—à–∏ –æ—Ç–¥–µ–ª—å–Ω–æ. –ó–ê–ì–ê–î–ö–ê –î–û–õ–ñ–ù–ê –ë–´–¢–¨ –ù–ê –†–£–°–°–ö–û–ú. –§–æ—Ä–º–∞—Ç: –ó–∞–≥–∞–¥–∫–∞: ... –û—Ç–≤–µ—Ç: ...';
      } else if (lang === 'ua') {
        prompt = '–ü—Ä–∏–¥—É–º–∞–π —Ü—ñ–∫–∞–≤—É –∑–∞–≥–∞–¥–∫—É —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é —ñ –¥–∞–π —Ç—ñ–ª—å–∫–∏ –∑–∞–≥–∞–¥–∫—É, –∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞–ø–∏—à–∏ –æ–∫—Ä–µ–º–æ. –ó–ê–ì–ê–î–ö–ê –ú–ê–Ñ –ë–£–¢–ò –£–ö–†–ê–á–ù–°–¨–ö–û–Æ. –§–æ—Ä–º–∞—Ç: –ó–∞–≥–∞–¥–∫–∞: ... –í—ñ–¥–ø–æ–≤—ñ–¥—å: ...';
      }
      const res = await fetch(API_URL, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          contents: [{ parts: [{ text: prompt }] }],
        }),
      });
      const data = await res.json();
      let match;
      if (lang === 'eng') {
        if (data.candidates && data.candidates[0] && data.candidates[0].content && data.candidates[0].content.parts) {
          const text = data.candidates[0].content.parts.map((p) => p.text).join(' ');
          match = text.match(/Riddle:(.*)Answer:(.*)/is);
        }
      } else if (lang === 'ru') {
        if (data.candidates && data.candidates[0] && data.candidates[0].content && data.candidates[0].content.parts) {
          const text = data.candidates[0].content.parts.map((p) => p.text).join(' ');
          match = text.match(/–ó–∞–≥–∞–¥–∫–∞:(.*)–û—Ç–≤–µ—Ç:(.*)/is);
        }
      } else if (lang === 'ua') {
        if (data.candidates && data.candidates[0] && data.candidates[0].content && data.candidates[0].content.parts) {
          const text = data.candidates[0].content.parts.map((p) => p.text).join(' ');
          match = text.match(/–ó–∞–≥–∞–¥–∫–∞:(.*)–í—ñ–¥–ø–æ–≤—ñ–¥—å:(.*)/is);
        }
      }
      if (match) {
        setRiddle(match[1].trim());
        setAnswer(match[2].trim());
      } else if (data.error) {
        setError(`Gemini API error: ${data.error.message || 'Unknown error'} (code: ${data.error.code || 'no code'})`);
      } else {
        setError('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–≥–∞–¥–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
      }
    } catch (e) {
      setError('API connection error: ' + e.message);
    } finally {
      setLoading(false);
    }
  }

  function normalizeAnswer(ans) {
    return ans
      .toLowerCase()
      .replace(/^(a|an)\s+/g, '')
      .trim();
  }

  async function checkAnswer(e) {
    e.preventDefault();
    if (!userAnswer.trim()) return;

    const normalizedUserAnswer = normalizeAnswer(userAnswer);
    const normalizedAnswer = normalizeAnswer(answer);

    if (normalizedUserAnswer === normalizedAnswer) {
      setResult('Correct! üéâ. You can click "get a riddle" and get another one');

      const user = auth.currentUser;
      if (user) {
        const userRef = ref(db, `users/${user.uid}`);
        const snapshot = await get(userRef);
        const data = snapshot.val() || { score: 0, username: user.displayName || user.email };

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—á–∫–∏
        await set(userRef, {
          ...data,
          score: data.score + 1,
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ leaderboard
        await set(ref(db, `leaderboard/${user.uid}`), {
          username: data.username,
          score: data.score + 1,
        });
      }
    } else {
      setResult('Incorrect. Try another one (click get a riddle)!');
    }
  }

  return (
    <div className="riddle-chat-container">
      <h2 className="riddle-chat-title">
        {translations[lang].title}
        <img src="/gemini-logo.png" alt="Gemini logo" style={{ height: '1.2em', verticalAlign: 'middle' }} />
      </h2>
      <p className="riddle-text">
        {translations[lang].description}
      </p>
      <button
        onClick={getRiddle}
        disabled={loading}
        className={`riddle-chat-button ${loading ? 'riddle-chat-button-disabled' : ''}`}
      >
        {loading ? translations[lang].generating : translations[lang].getRiddle}
      </button>
      {error && <div className="riddle-chat-error">{error}</div>}
      {riddle && (
        <div className="riddle-chat-content">
          <div className="riddle-chat-label">{translations[lang].riddle}</div>
          <div className="riddle-chat-riddle">{riddle}</div>
          <div className="riddle-chat-input-row">
            <input
              type="text"
              placeholder={translations[lang].yourAnswer}
              value={userAnswer}
              onChange={(e) => setUserAnswer(e.target.value)}
              className="riddle-chat-input"
              disabled={!!result}
            />
            <button
              onClick={checkAnswer}
              className="riddle-chat-check-button"
              disabled={!!result}
            >
              {translations[lang].check}
            </button>
          </div>
          {result && (
            <div
              className={`riddle-chat-result ${
                result.startsWith('Correct') || result.startsWith('–í–µ—Ä–Ω–æ') || result.startsWith('–í—ñ—Ä–Ω–æ')
                  ? 'riddle-chat-result-correct'
                  : 'riddle-chat-result-incorrect'
              }`}
            >
              {result.startsWith('Correct') || result.startsWith('–í–µ—Ä–Ω–æ') || result.startsWith('–í—ñ—Ä–Ω–æ')
                ? translations[lang].correct
                : translations[lang].incorrect}
            </div>
          )}
          {result && <div className="riddle-chat-answer">{translations[lang].answer} {answer}</div>}
        </div>
      )}
    </div>
  );
}

export default RiddleChat;